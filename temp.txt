import React, { useMemo, useState } from 'react';
import { Alert, Image, Pressable, StyleSheet, Text, TextInput, View } from 'react-native';
import { Feather } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';

import type { FeedPost } from '../constants/feedData';
import type { CompressedImage } from '../utils/imageCompression';
import { theme } from '../styles/theme';
import ImageUploadDialog from './ImageUploadDialog';

const AVATAR_SIZE = 48;
const LINE_HEIGHT = 22;
const MIN_INPUT_HEIGHT = LINE_HEIGHT * 3;
const MAX_INPUT_HEIGHT = LINE_HEIGHT * 5;

export type PostComposerSharePayload = {
  content: string;
  image?: CompressedImage | null;
};

export type PostComposerProps = {
  author: FeedPost['author'];
  onShare?: (payload: PostComposerSharePayload) => Promise<boolean> | boolean;
};

export const PostComposer: React.FC<PostComposerProps> = ({ author, onShare }) => {
  const [value, setValue] = useState('');
  const [inputHeight, setInputHeight] = useState(MIN_INPUT_HEIGHT);
  const [showImageDialog, setShowImageDialog] = useState(false);
  const [attachedImage, setAttachedImage] = useState<string | null>(null);
  const [isSharing, setIsSharing] = useState(false);

  const avatarSource = useMemo(() => {
    const uri = author.avatar?.trim();
    if (uri) {
      return { uri };
    }

    return {
      uri: `https://ui-avatars.com/api/?name=${encodeURIComponent(author.name)}&background=random&color=ffffff&size=128`,
    };
  }, [author.avatar, author.name]);

  const handleShare = async () => {
    const trimmed = value.trim();

    if (!trimmed.length) {
      Alert.alert('Add Something', 'Please enter some content before sharing.');
      return;
    }

    if (isSharing) {
      return;
    }

    try {
      setIsSharing(true);
      const result = await onShare?.({
        content: trimmed,
        image: attachedImage,
      });

      if (result === false) {
        return;
      }

      setValue('');
      setInputHeight(MIN_INPUT_HEIGHT);
      setAttachedImage(null);
    } finally {
      setIsSharing(false);
    }
  };

  const handleAttachmentPress = () => {
    if (attachedImage) {
      Alert.alert('Image Limit', 'You can only upload one image per post.');
      return;
    }
    setShowImageDialog(true);
  };

  const handleImageSelected = (uri: string) => {
    setAttachedImage(uri);
    setShowImageDialog(false);
  };

  const handleRemoveImage = () => {
    setAttachedImage(null);
  };

  return (
    <View>
      <View style={styles.topRow}>
        <View style={styles.profileBlock}>
          <Image source={avatarSource} style={styles.avatar} />
          <View>
            <Text style={styles.name}>{author.name}</Text>
            <Text style={styles.handle}>@{author.username}</Text>
          </View>
        </View>

        <View style={styles.actions}>
          <Pressable
            style={({ pressed }) => [
              styles.iconButton,
              attachedImage ? styles.iconButtonDisabled : null,
              pressed && !attachedImage ? styles.iconPressed : null,
            ]}
            accessibilityRole="button"
            accessibilityLabel="Attach media"
            onPress={handleAttachmentPress}
            disabled={!!attachedImage}
          >
            <Feather
              name="paperclip"
              size={18}
              color={attachedImage ? theme.colors.iconInactive : theme.colors.icon}
            />
          </Pressable>

          <Pressable
            onPress={handleShare}
            accessibilityRole="button"
            accessibilityLabel="Share post"
            disabled={isSharing}
            style={({ pressed }) => [
              styles.shareButton,
              isSharing ? styles.shareDisabled : null,
              pressed && !isSharing ? styles.sharePressed : null,
            ]}
          >
            <LinearGradient
              colors={[theme.gradients.header.from, theme.gradients.header.to]}
              start={{ x: 0, y: 0.5 }}
              end={{ x: 1, y: 0.5 }}
              style={styles.shareGradient}
            >
              <Text style={styles.shareLabel}>Share</Text>
            </LinearGradient>
          </Pressable>
        </View>
      </View>

      <View style={styles.composerBody}>
        <TextInput
          value={value}
          onChangeText={setValue}
          placeholder={'Share your thoughts with the world!\nWhat\'s on your mind today?'}
          placeholderTextColor={theme.colors.muted}
          multiline
          editable={!isSharing}
          textAlignVertical="top"
          style={[styles.input, { height: inputHeight }]}
          onContentSizeChange={(event) => {
            const nextHeight = Math.min(
              MAX_INPUT_HEIGHT,
              Math.max(MIN_INPUT_HEIGHT, event.nativeEvent.contentSize.height),
            );
            if (nextHeight !== inputHeight) {
              setInputHeight(nextHeight);
            }
          }}
        />

        {attachedImage && (
          <View style={styles.attachedImageContainer}>
            <Image
              source={{ uri: attachedImage }}
              style={styles.attachedImage}
              resizeMode="contain"
            />
            <Pressable
              style={styles.removeImageButton}
              onPress={handleRemoveImage}
              accessibilityRole="button"
              accessibilityLabel="Remove image"
            >
              <Feather name="x" size={16} color="#ffffff" />
            </Pressable>
          </View>
        )}
      </View>

      <ImageUploadDialog
        visible={showImageDialog}
        onClose={() => setShowImageDialog(false)}
        onImageSelected={handleImageSelected}
        currentImage={attachedImage || undefined}
        onRemove={handleRemoveImage}
        showRemoveOption={!!attachedImage}
        title="Attach Image"
      />
    </View>
  );
};

const styles = StyleSheet.create({
  topRow: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: theme.spacing.sm,
  },
  profileBlock: {
    flexDirection: 'row',
    alignItems: 'center',
    flexShrink: 1,
    marginRight: theme.spacing.md,
  },
  avatar: {
    width: AVATAR_SIZE,
    height: AVATAR_SIZE,
    borderRadius: 6,
    backgroundColor: '#111827',
    marginRight: theme.spacing.sm,
  },
  name: {
    color: theme.colors.text,
    fontSize: 18,
    fontWeight: '600',
  },
  handle: {
    color: theme.colors.muted,
    fontSize: 14,
    marginTop: 2,
  },
  actions: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: theme.spacing.sm,
  },
  iconButton: {
    width: 36,
    height: 36,
    borderRadius: 18,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'transparent',
  },
  iconPressed: {
    opacity: 0.6,
  },
  iconButtonDisabled: {
    backgroundColor: 'transparent',
    opacity: 0.5,
  },
  shareButton: {
    borderRadius: 16,
    overflow: 'hidden',
  },
  shareGradient: {
    paddingHorizontal: theme.spacing.md,
    paddingVertical: theme.spacing.xs,
    borderRadius: 16,
    minWidth: 72,
    alignItems: 'center',
    justifyContent: 'center',
  },
  sharePressed: {
    opacity: 0.85,
  },
  shareDisabled: {
    opacity: 0.6,
  },
  shareLabel: {
    color: '#ffffff',
    fontSize: 15,
    fontWeight: '600',
  },
  composerBody: {
    marginLeft: AVATAR_SIZE + theme.spacing.sm,
    marginRight: theme.spacing.sm,
  },
  input: {
    color: theme.colors.text,
    fontSize: 16,
    lineHeight: LINE_HEIGHT,
    letterSpacing: 0.15,
    alignSelf: 'stretch',
    paddingRight: theme.spacing.sm,
  },
  attachedImageContainer: {
    position: 'relative',
    alignSelf: 'stretch',
    marginTop: theme.spacing.sm,
    borderRadius: 12,
    overflow: 'hidden',
    backgroundColor: '#1e293b',
    justifyContent: 'center',
    alignItems: 'center',
    minHeight: 200,
  },
  attachedImage: {
    width: '100%',
    height: undefined,
    aspectRatio: 4 / 3,
  },
  removeImageButton: {
    position: 'absolute',
    top: 8,
    right: 8,
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.3)',
  },
});

export default PostComposer;
